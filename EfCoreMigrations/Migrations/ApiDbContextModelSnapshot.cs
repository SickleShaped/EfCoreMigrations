// <auto-generated />
using System;
using EfCoreMigrations.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EfCoreMigrations.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EfCoreMigrations.DB.Entities.CompanyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("EfCoreMigrations.DB.Entities.PassengerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("passengers", (string)null);
                });

            modelBuilder.Entity("EfCoreMigrations.DB.Entities.PassengerTripAuxilatyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PassengerId");

                    b.HasIndex("TripId");

                    b.ToTable("passengertrips", (string)null);
                });

            modelBuilder.Entity("EfCoreMigrations.DB.Entities.TripEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Plane")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RandomField")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TimeOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TownFrom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TownTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("trips", (string)null);
                });

            modelBuilder.Entity("EfCoreMigrations.DB.Entities.PassengerTripAuxilatyEntity", b =>
                {
                    b.HasOne("EfCoreMigrations.DB.Entities.PassengerEntity", "Passenger")
                        .WithMany("PassengerTrips")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfCoreMigrations.DB.Entities.TripEntity", "Trip")
                        .WithMany("PassengerTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("EfCoreMigrations.DB.Entities.TripEntity", b =>
                {
                    b.HasOne("EfCoreMigrations.DB.Entities.CompanyEntity", "Company")
                        .WithMany("tripModels")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EfCoreMigrations.DB.Entities.CompanyEntity", b =>
                {
                    b.Navigation("tripModels");
                });

            modelBuilder.Entity("EfCoreMigrations.DB.Entities.PassengerEntity", b =>
                {
                    b.Navigation("PassengerTrips");
                });

            modelBuilder.Entity("EfCoreMigrations.DB.Entities.TripEntity", b =>
                {
                    b.Navigation("PassengerTrips");
                });
#pragma warning restore 612, 618
        }
    }
}
